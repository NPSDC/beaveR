% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scaleInfReps.R
\name{computeSizeFactors}
\alias{computeSizeFactors}
\title{Compute Size Factors}
\usage{
computeSizeFactors(
  tse,
  type = "txp",
  lengthCorrect = TRUE,
  meanDepth = NULL,
  sfFun = NULL,
  minCount = 10,
  minN = 3,
  quiet = FALSE,
  force = FALSE
)
}
\arguments{
\item{tse}{a TreeSummarizedExperiment with: \code{infReps} a list of
inferential replicate count matrices, \code{counts} the
estimated counts matrix, and \code{length} the effective
lengths matrix}

\item{type}{whether to use txp or gene for computing size factor(default txp)}

\item{lengthCorrect}{whether to use effective length correction
(default is TRUE)}

\item{meanDepth}{(optional) user can
specify a different mean sequencing depth. By default
the geometric mean sequencing depth is computed}

\item{sfFun}{(optional) size factors function. An
alternative to the median ratio can be provided here to adjust
the scaledTPM so as to remove remaining library size differences.}

\item{minCount}{for internal filtering, the minimum count}

\item{minN}{for internal filtering, the minimum sample size
at \code{minCount}}

\item{quiet}{display no messages}

\item{force}{boolean to forcefully compute size factors (default FALSE)}
}
\value{
A TreeSummarizedExperiment object where size factors have been
computed and added as a column \code{sf} to metadata
}
\description{
A helper function to compute size factors using median ratio method.
First, counts are corrected per row using the effective lengths
(for gene counts, the average transcript lengths), then scaled
per column to the geometric mean sequence depth, and finally are
adjusted per-column up or down by the median ratio size factor to
minimize systematic differences across samples.
}
\examples{

# path to example data
dir <- system.file("extdata/brain_sim_nodtu_small_example", package = "beaveR")
# path to file output by TreeTerminus
clustFile <- file.path(dir, "cluster_nwk.txt")
# path to Salmon quantified files
quantDir <- file.path(dir, "out_sal")
samples <- as.vector(outer(c(1:6), c(1, 2), function(x, y) paste(x, y, sep = "_")))
quantFiles <- file.path(quantDir, samples, "quant.sf")
coldata <- data.frame(files = quantFiles, names = samples, condition = factor(rep(1:2, each = 6)))
tse <- buildTSE(treeTermFile = clustFile, coldata = coldata)
tse <- computeSizeFactors(tse)

}
